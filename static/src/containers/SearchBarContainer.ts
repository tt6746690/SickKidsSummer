import { connect } from "react-redux";

import {
  loadSearchIndex,
  addGene,
  addGenePanel,
  selectGenePanel,
  selectRefTissueSite,
  clearGeneSelection,
  clearTissueSiteSelection
} from "../reducers/Actions";
import GenePanelListing from "../components/GenePanelListing";
import { stateInterface, geneEntity, searchIndexEntity } from "../Interfaces";
import SearchBar from "../components/SearchBar";

const PANEL_OPTION = "PANEL_OPTION";
const GENE_OPTION = "GENE_OPTION";

const mapStateToProps = (state: stateInterface) => {
  let {
    entities: { gene, genePanel, searchIndex },
    ui: { select: { genePanel: selectedGenePanel } }
  } = state;

  const getOptions = (): searchIndexEntity[] => {
    let geneOptions: searchIndexEntity[] = searchIndex.map(gene => {
      return {
        type: GENE_OPTION,
        ...gene
      };
    });
    let panelOptions: searchIndexEntity[] = genePanel.map(panel => {
      return {
        type: PANEL_OPTION,
        name: panel.genePanelId,
        panelGenes: panel.panelGenes
      };
    });

    return panelOptions.concat(geneOptions) || [];
  };

  let options = getOptions();

  return {
    options,
    gene
  };
};

const mapDispatchToProps = dispatch => {
  /* 
      Load search index 
  */
  const fetchSearchIndex = () => {
    fetch("http://127.0.0.1:5000/api/search/index", {
      mode: "cors"
    })
      .then(response => response.json())
      .then(data => {
        dispatch(loadSearchIndex(data));
      })
      .catch(err => console.log("fetch: ", err));
  };

  /* 
      Fetch {exonExpr, geneExpr} given ensemblI
    */
  const fetchExonExpr = ensemblId => {
    fetch("http://127.0.0.1:5000/api/exon_expr/" + ensemblId, {
      mode: "cors"
    })
      .then(response => response.text())
      .then(text => {
        // handles -Infinity during parsing, generated by 1samp_Ttest
        return JSON.parse(text.replace(/\-Infinity\b/g, null));
      })
      .then(data => {
        dispatch(
          addGene({
            ensemblId,
            exonExpr: data.exonExpr,
            tissueRanking: data.tissueRanking
          })
        );
      })
      .catch(err => console.log("fetch: ", err));
  };

  const fetchGeneExpr = ensemblId => {
    fetch("http://127.0.0.1:5000/api/gene_expr/" + ensemblId, {
      mode: "cors"
    })
      .then(response => response.json())
      .then(geneExpr => {
        dispatch(
          addGene({
            ensemblId,
            geneExpr: geneExpr
          })
        );
      })
      .catch(err => console.log("fetch: ", err));
  };

  const onGenePanelListSelect = (genePanelId: string) => {
    dispatch(selectRefTissueSite(""));
    dispatch(clearGeneSelection());
    dispatch(clearTissueSiteSelection());

    dispatch(selectGenePanel(genePanelId));

    let fetchGenePanel = fetch(
      "http://127.0.0.1:5000/api/gene_panels/" + genePanelId,
      {
        mode: "cors"
      }
    )
      .then(response => response.json())
      .then(genePanel => {
        dispatch(
          addGenePanel({
            genePanelId,
            panelGenes: genePanel.map(gene => gene.ensembl_id)
          })
        );

        genePanel.map(gene => {
          dispatch(
            addGene({
              ensemblId: gene.ensembl_id,
              geneSymbol: gene.symbol
            })
          );
          /* 
              Once a genePanel is selected, call fetch on 
              all genes related to the panel such that 
              -- exonExpr 
              -- geneExpr 
              are populated 
            */
          fetchExonExpr(gene.ensembl_id);
          fetchGeneExpr(gene.ensembl_id);
        });
      })
      .catch(err => console.log("fetch: ", err));

    fetch("http://127.0.0.1:5000/api/gene_panels/ranking/" + genePanelId, {
      mode: "cors"
    })
      .then(response => response.json())
      .then(tissueRanking => {
        dispatch(
          addGenePanel({
            genePanelId,
            tissueRanking
          })
        );
      })
      .catch(err => console.log("fetch: ", err));
  };

  const onSearchBarChange = options => {
    console.log({ where: "onSearchBarChange", options });

    options.forEach(option => {
      if (option.type === GENE_OPTION) {
        fetchExonExpr(option.name);
        fetchGeneExpr(option.name);
      } else if (option.type === PANEL_OPTION) {
        onGenePanelListSelect(option.name);
      }
    });
  };

  return { fetchSearchIndex, onSearchBarChange };
};

const SearchBarContainer = connect(mapStateToProps, mapDispatchToProps)(
  SearchBar
);

export default SearchBarContainer;
