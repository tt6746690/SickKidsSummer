import { connect } from "react-redux";

import {
  loadSearchIndex,
  addGene,
  addGenePanel,
  selectGenePanel,
  selectRefTissueSite,
  clearGeneSelection,
  clearTissueSiteSelection,
  updateIncludeGene
} from "../reducers/Actions";
import GenePanelListing from "../components/GenePanelListing";
import {
  stateInterface,
  geneEntity,
  searchIndexEntity,
  OPTION_TYPE
} from "../Interfaces";
import SearchBar from "../components/SearchBar";
import { getGenePanelEntityById } from "../store/Query";

const mapStateToProps = (state: stateInterface) => {
  let { entities: { gene, genePanel, searchIndex } } = state;

  /* 
    options consists of 
    -- genePanels 
    -- genes listed udner entities.searchIndex
  */
  const getOptions = (): searchIndexEntity[] => {
    let geneOptions: searchIndexEntity[] = searchIndex.map(gene => {
      return { type: OPTION_TYPE.GENE_TYPE, ...gene };
    });
    let panelOptions: searchIndexEntity[] = genePanel.map(panel => {
      return {
        type: OPTION_TYPE.PANEL_TYPE,
        name: panel.genePanelId,
        panelGenes: panel.panelGenes
      };
    });

    return panelOptions.concat(geneOptions) || [];
  };

  return {
    options: getOptions(),
    gene,
    genePanel
  };
};

const mapDispatchToProps = dispatch => {
  /* 
      Load search index 
  */
  const fetchSearchIndex = () => {
    return fetch("http://127.0.0.1:5000/api/search/index", {
      mode: "cors"
    })
      .then(response => response.json())
      .then(data => {
        dispatch(loadSearchIndex(data));
      })
      .catch(err => console.log("fetch: ", err));
  };

  /* 
      Fetch {exonExpr, geneExpr} given ensemblI
    */
  const fetchExonExpr = ensemblId => {
    return fetch("http://127.0.0.1:5000/api/exon_expr/" + ensemblId, {
      mode: "cors"
    })
      .then(response => response.text())
      .then(text => {
        // handles -Infinity during parsing, generated by 1samp_Ttest
        return JSON.parse(text.replace(/\-Infinity\b/g, null));
      })
      .then(data => {
        dispatch(
          addGene({
            ensemblId,
            exonExpr: data.exonExpr,
            tissueRanking: data.tissueRanking
          })
        );
      })
      .catch(err => console.log("fetch: ", err));
  };

  const fetchGeneExpr = ensemblId => {
    return fetch("http://127.0.0.1:5000/api/gene_expr/" + ensemblId, {
      mode: "cors"
    })
      .then(response => response.json())
      .then(geneExpr => {
        dispatch(
          addGene({
            ensemblId,
            geneExpr: geneExpr
          })
        );
      })
      .catch(err => console.log("fetch: ", err));
  };

  const onGenePanelSelect = (genePanelId: string) => {
    dispatch(selectRefTissueSite(""));
    dispatch(clearGeneSelection());
    dispatch(clearTissueSiteSelection());
    dispatch(selectGenePanel(genePanelId));
  };

  const fetchGenePanel = (genePanelId: string) => {
    return fetch("http://127.0.0.1:5000/api/gene_panels/" + genePanelId, {
      mode: "cors"
    })
      .then(response => response.json())
      .then(genePanel => {
        dispatch(
          addGenePanel({
            genePanelId,
            panelGenes: genePanel.map(gene => gene.ensembl_id)
          })
        );
      })
      .catch(err => console.log("fetch: ", err));
  };

  const onOptionChange = options => {
    dispatch(updateIncludeGene(options));
  };

  return {
    fetchSearchIndex,
    fetchExonExpr,
    fetchGeneExpr,
    fetchGenePanel,
    onGenePanelSelect,
    onOptionChange
  };
};

const SearchBarContainer = connect(mapStateToProps, mapDispatchToProps)(
  SearchBar
);

export default SearchBarContainer;
